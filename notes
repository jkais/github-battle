REACT
- Composition with Components (Element)
- ReactDOM
- Declarative UI
- Pure Javascript
- Redux

-> Babel
-> Webpack
-> Routing (React Router)
-> Styling (Traditional CSS vs CSS in JS (styled components))
-> Redux (when React's state is not enough)

WEBPACK
- Bundle stuff
- Entrypoint and Output
- Transformations with Loaders (Babel, CSS, SVG...)
- Plugins
- Mode

JSX
- React.Fragment for more than one element returned by a render

PROPS
- Props are the arguments of Components
- Props can be any kind of JS object
- <Component name="Test"> => this.props.name

LISTS
- list.map((item) => (<div>{item.name}</div>))
- a list needs a key=item.id so that React can distinguish the elements
- no strange framework magic like in Angular or Vue (v-for...)

PROP TYPES
- validate the types of props that are passed to a Component
- it is not TypeScript, but still...


COMPONENT LIFECYCLE
1. Mount (Initial State, DOM Node) - componentDidMount
2. Update - componentDidUpdate
3. Unmount - componentWillUnmount

ICONS
- Just https://react-icons.netlify.com/


FORMS
- Controlled (state in Component) vs Uncontrolled (state in Form)

REUSING COMPONENTS
- creating reusable components ist pretty easy and handy
- if the component has no state, you can just use a function that returns JSX
- handling state between components feels a bit strange at the beginning (passing functions, having fun with this...)

HIGHER ORDER COMPONENTS
- a function that you pass a Component and it then returns a Component with additional functionality
- doesn't sound good for your brain
- can cause naming collisions if the passed component uses the same name for state

Render Props
- Some kind of Wrapper Component
- Works by passing a function called i.e. render as props and then call it inside the wrapper's render
- Not only works with render, just pass a function als props and then call it.
- Of course you can also use the children props for passing a function

React Context
- Share data between components, Provider an Consumer, Provider an Consumer






WHAT I DIDN'T LIKE
- In Component constructors you have to bind this like here: this.updateLanguage = this.updateLanguage.bind(this)
- Getting used to updating state with this.setState instead of this.state.value = 1
- React Hooks should ease this a bit by introducing funcional components
- Passing functions to components that will be executed on a specific event is not good for your brain
